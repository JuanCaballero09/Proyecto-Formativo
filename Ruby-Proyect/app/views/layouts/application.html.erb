  <!DOCTYPE html>
  <html>
    <head>
      <title><%= content_for(:title) || "Bitevia" %></title>
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <meta name="apple-mobile-web-app-capable" content="yes">
      <meta name="mobile-web-app-capable" content="yes">
      <%= csrf_meta_tags %>
      <%= csp_meta_tag %>

      <%= yield :head %>

      <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
      <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

      <link rel="icon" href="<%= asset_path('LogoLogo.svg') %>" type="image/svg+xml">
      <link rel="apple-touch-icon" href="<%= asset_path('LogoLogo.svg') %>" type="image/svg+xml">

      <%# Includes all stylesheet files in app/assets/stylesheets %>
      <%= stylesheet_link_tag "bootstrap.min", "data-turbo-track": "reload" %>
      <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
      <%= javascript_importmap_tags %>
    </head>

    <body>
      <header class="header">
        <div class="logo">
            <%= image_tag "LogoLogo.svg" %>
            <h1>Bitevia Software</h1>
        </div>
        <%= form_with url: buscar_path, method: :get, local: true, html: {class: "buscador"} do %>
          <button type="submit">
              <%= image_tag "icons/magnifying-glass-solid.svg", alt: "Buscar" %>
          </button>
          <%= search_field_tag :q, params[:q], placeholder: t("home.navbar.buscar_productos") %>
        <% end %>
      </header>

      <nav class="navbar">
        <div class="links">
          <%= link_to t("home.navbar.inicio"), root_path %>
          <%= link_to t("home.navbar.menu"), products_path %>
          <%= link_to t("home.navbar.categorias"), grupos_path %>

          <% if current_user %>
            <% if current_user.admin? or current_user.empleado? %>
              <%= link_to t("home.navbar.panel_de_administracion"), dashboard_root_path%>
            <% end %>
          <% end %>
        </div>

        <div style="display: flex; flex-direction: row; align-items: center; gap: 15px;">
          <% if I18n.locale == :es %>
            <%= link_to url_for(locale: 'en'), style: "background-color: transparent; box-shadow: none;" do %>
                <% image_tag "icons/estados-unidos-de-america.svg", class: "flag-icon", style: "width: 45px; height: 45px"%>
              <% end %>
          <% else %>
            <%= link_to url_for(locale: 'es'), style: "background-color: transparent; box-shadow: none;" do %>
              <%= image_tag "icons/españa.svg", class: "flag-icon", style: "width: 45px; height: 45px"%>
            <% end %>
          <% end %>   

          <% if current_user %>
            <div class="user">

              <% carrito = Carrito.find_by(id: session[:carrito_id]) %>
              <% total = carrito&.carrito_items&.sum(:cantidad) || 0 %>

              <%= link_to carrito_path do %> 
                <%= image_tag("icons/cart-shopping-solid.svg", alt: "Carrito") %>
                <span id="contador-carrito"><%= total %></span>

              <% end %>
              
              <%= link_to image_tag("icons/user-solid.svg", alt: "Perfil"), edit_user_registration_path%>

              <div class="btn-user">
                <%= button_to t("home.navbar.cerrar_sesion"), destroy_user_session_path, method: :delete, data: { turbo_confirm: "¿Estás seguro que quieres cerrar sesión?" } %>
              </div>
            </div>
          <% else %>
            <div class="user">

              <% total = session[:carrito]&.sum { |p| p["cantidad"] } || 0 %>
              <%= link_to carrito_path do %>
                <%= image_tag("icons/cart-shopping-solid.svg", alt: "Carrito") %>
                <span id="contador-carrito"><%= total %></span>
              <% end %>

              <div class="btn-user">
                <%= link_to t("home.navbar.iniciar_sesion"), new_user_session_path%>
              </div>
            </div>
          <% end %>
        </div>

      </nav>

      <main class="vistas">

        <!-- Contenedor de alertas premium -->
        <div id="alert-container">
          <% flash.each do |key, message| %>
            <% css_class = case key.to_sym
              when :notice then "info"
              when :alert  then "warning"
              when :error  then "error"
              when :success then "success"
              else "info"
              end %>
            <div class="alert <%= css_class %>" data-alert-type="<%= css_class %>">
              <span class="alert-icon"></span>
              <%= message %>
              <button class="alert-close" onclick="this.parentElement.classList.add('removing')">&times;</button>
              <div class="alert-progress"></div>
            </div>
          <% end %>

          <!-- Contenedor vacío para toasts dinámicos -->
          <div id="flash-toast"></div>
        </div>
        
        <%= yield %>

      </main>

      <footer class="footer">

        <div class="social">
          <a href="#">  
            <%= image_tag "icons/instagram-brands.svg" %>
          </a>
          <a href="#">
            <%= image_tag "icons/whatsapp-brands.svg" %>
          </a>
          <a href="#">
            <%= image_tag "icons/tiktok-brands.svg" %>
          </a>
        </div>

        <div class="footer-name">
          <span class="linea"></span>
          <h2 class="nombre-footer">Bitevia</h2>
          <span class="linea"></span>
        </div>

        <p>v3.7.0</p>
        <p>© 2025 Bitevia Software. <%= t("home.footer.derechos_reservados")%></p>
      </footer>
      <script>
      document.addEventListener("turbo:load", () => {
        const AUTO_CLOSE_MS = 4000; // Aumentado a 4 segundos

        const showAlert = (alertElement) => {
          if (alertElement.dataset.flashProcessed) return;
          alertElement.dataset.flashProcessed = "true";

          // Aplicar animación de entrada
          alertElement.style.animation = "alertSlideIn 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards";

          // Auto-close después del tiempo especificado
          const autoCloseTimer = setTimeout(() => {
            closeAlert(alertElement);
          }, AUTO_CLOSE_MS);

          // Pausar auto-close al hover
          alertElement.addEventListener("mouseenter", () => {
            clearTimeout(autoCloseTimer);
            const progressBar = alertElement.querySelector('.alert-progress');
            if (progressBar) {
              progressBar.style.animationPlayState = 'paused';
            }
          });

          // Reanudar auto-close al salir del hover
          alertElement.addEventListener("mouseleave", () => {
            const progressBar = alertElement.querySelector('.alert-progress');
            if (progressBar) {
              progressBar.style.animationPlayState = 'running';
            }
            setTimeout(() => closeAlert(alertElement), 1000);
          });

          // Cerrar con Escape
          const handleEscape = (e) => {
            if (e.key === 'Escape') {
              closeAlert(alertElement);
              document.removeEventListener('keydown', handleEscape);
            }
          };
          document.addEventListener('keydown', handleEscape);
        };

        const closeAlert = (alertElement) => {
          if (alertElement.classList.contains('removing')) return;
          
          alertElement.classList.add('removing');
          alertElement.style.animation = "alertSlideOut 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards";
          
          alertElement.addEventListener("animationend", () => {
            if (alertElement.parentNode) {
              alertElement.remove();
            }
          }, { once: true });
        };

        // Procesar alertas existentes
        document.querySelectorAll("#alert-container .alert").forEach(showAlert);

        // Observar nuevas alertas
        const bodyObserver = new MutationObserver((mutations) => {
          for (const mutation of mutations) {
            for (const node of mutation.addedNodes) {
              if (!(node instanceof Element)) continue;

              if (node.id === "alert-container") {
                node.querySelectorAll(".alert").forEach(showAlert);
              } else {
                if (node.classList && node.classList.contains("alert")) {
                  showAlert(node);
                }
                if (node.querySelectorAll) {
                  node.querySelectorAll(".alert").forEach(showAlert);
                }
              }
            }
          }
        });

        bodyObserver.observe(document.body, { childList: true, subtree: true });

        // Función global para crear alertas dinámicas
        window.showFlashAlert = function(message, type = 'info') {
          const container = document.getElementById('flash-toast');
          if (!container) return;

          const alert = document.createElement('div');
          alert.className = `alert ${type}`;
          alert.dataset.alertType = type;
          alert.innerHTML = `
            <span class="alert-icon"></span>
            ${message}
            <button class="alert-close" onclick="this.parentElement.classList.add('removing')">&times;</button>
            <div class="alert-progress"></div>
          `;

          container.appendChild(alert);
          showAlert(alert);
        };
      });
      </script>

    </body>    
  </html>
